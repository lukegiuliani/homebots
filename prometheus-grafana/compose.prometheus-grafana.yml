# Inspired by https://github.com/docker/awesome-compose/blob/master/prometheus-grafana/compose.yaml

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus/'
      - '--web.route-prefix=/prometheus/'

    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homebots_traefik-net"
      - "traefik.http.routers.prometheus.rule=Host(`${HOSTNAME}`) && PathPrefix(`/prometheus`)"
      # We don't need to preserve the http endpoint here as internal docker routing is post traefik
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    networks:
      - prometheus-net
      - traefik-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_GF_SECURITY_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=https://${HOSTNAME}/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homebots_traefik-net"

      - "traefik.http.routers.grafana.rule=Host(`${HOSTNAME}`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

      # - traefik.http.routers.grafana-dev.rule=Host(`localhost`) && PathPrefix(`/grafana`)
      # - traefik.http.routers.grafana-dev.entrypoints=web
      # - traefik.http.services.grafana-dev.loadbalancer.server.port=3000

    networks:
      - traefik-net
      - prometheus-net

volumes:
  prom_data:

networks:
  prometheus-net:
